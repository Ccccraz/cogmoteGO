name: build and release

on:
  push:
    tags:
      - "v*"

jobs:
  build_for_linux:
    strategy:
      matrix:
        include:
          - target: linux-amd64
            os: ubuntu-latest
            ext: ""
            archive_type: tar.gz
          - target: linux-arm64
            os: ubuntu-24.04-arm
            ext: ""
            archive_type: tar.gz

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Install Dependencies on Linux
        run: |
          sudo apt-get update
          sudo apt-get install -y libzmq3-dev pkg-config

      - name: Build
        env:
          CGO_ENABLED: 1
        run: |
          OUTPUT_DIR="build/${{ matrix.target }}"
          mkdir -p "$OUTPUT_DIR"
          go build -o "$OUTPUT_DIR/cogmoteGO${{ matrix.ext }}" .

      - name: Package
        run: |
          mkdir -p dist
          cd "build/${{ matrix.target }}"
          TAG_NAME=${{ github.ref_name }}

          FILENAME_BASE="cogmoteGO-${{ matrix.target }}-${TAG_NAME}"

          tar -czvf "../../dist/${FILENAME_BASE}.tar.gz" "cogmoteGO${{ matrix.ext}}"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-asset-${{ matrix.target }}
          path: dist/
          retention-days: 1

  build_for_windows:
    needs: "build_for_linux"
    runs-on: windows-latest
    env:
      target: windows-amd64
      ext: .exe
      archive_type: zip

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Install Dependencies on Windows with vcpkg
        shell: pwsh
        run: vcpkg install

      - name: Build on Windows
        shell: pwsh
        env:
          CGO_ENABLED: 1
          CGO_CFLAGS: "-I${{ github.workspace }}/vcpkg_installed/x64-windows/include"
          CGO_LDFLAGS: "-L${{ github.workspace }}/vcpkg_installed/x64-windows/lib -l:libzmq-mt-4_3_5.lib"
        run: |
          $OUTPUT_DIR = "build\${{ env.target }}"
          New-Item -ItemType Directory -Path $OUTPUT_DIR -Force | Out-Null
          go build -o "$OUTPUT_DIR\cogmoteGO${{ env.ext }}" .

      - name: Package
        shell: pwsh
        run: |
          $TAG_NAME = "${{ github.ref_name }}"
          $BUILD_DIR = "build/${{ env.target }}"
          $DIST_DIR = "dist"
          $FILENAME_BASE = "cogmoteGO-${{ env.target }}-$TAG_NAME.${{ env.archive_type }}"
          New-Item -ItemType Directory -Force -Path $DIST_DIR | Out-Null

          $DLL_PATH = "${{ github.workspace }}/vcpkg_installed/x64-windows/bin/libzmq-mt-4_3_5.dll"
          Copy-Item -Path $DLL_PATH -Destination $BUILD_DIR
          Compress-Archive -Path "$BUILD_DIR/*" -DestinationPath "$DIST_DIR/$FILENAME_BASE" -Force

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-asset-${{ env.target }}
          path: dist/
          retention-days: 1


  release:
    needs: "build_for_windows"
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          prerelease: ${{ contains(github.ref_name, '-') }}
